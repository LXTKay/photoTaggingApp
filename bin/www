#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('express-template:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const address = server.address();
  let bind;
  if (typeof address === 'string') {
    bind = 'pipe ' + address;
  } else {
    bind = 'port ' + address.port;
  }
  debug('Listening on ' + bind);
}

/* Listen on provided port, on all network interfaces.
*/

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

